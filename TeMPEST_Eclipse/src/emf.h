/*****************************************************************************/
/*                                                                           */
/*   Module:    emf.h                                                        */
/*                                                                           */
/*   Purpose:   Contains variable declarations for the EMF Module.           */
/*                                                                           */
/*   Inputs:    None.                                                        */
/*                                                                           */
/*   Outputs:   None.                                                        */
/*                                                                           */
/*   Uses:      Declarations from: "types.h" and "advmath.h" from the        */
/*              science library.                                             */
/*                                                                           */
/*   History:   01_Feb_94 NRV   Rewritten.                                   */
/*                                                                           */
/*****************************************************************************/



#if TEMPEST_MAIN

double efield_boom_x =    50.0 ;   /* Separation distance between two ends   */
                                   /*   of the boom used to measure E_x      */
double efield_boom_y =    50.0 ;   /* Separation distance between two ends   */
                                   /*   of the boom used to measure E_y      */
double efield_boom_z =    50.0 ;   /* Separation distance between two ends   */
                                   /*   of the boom used to measure E_z      */

double boom_current  =    -1.0 ;   /* Current forced through booms           */

double fuel_mass_flow =   -1.0 ;   /* Fuel Mass flow (kg/sec)                */
double total_fuel_mass =  -1.0 ;   /* Total Fuel Mass (kg)                   */
double boom_power_in   =  -1.0 ;   /* Input power to boom propulsion (W)     */

int    emf_integ_seg =       0 ;   /* Number of tether segments for the      */
                                   /*   integration of VxB.dl                */

double emf_set       =    -1.0 ;   /* Value EMF to be set to                 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Cartesian vxb_lvlh0      ;         /* Motional E-field generated (lvlh) @ 0  */
double    vxb_lvlh0_mag  ;         /* Magnitude of generated Motional E-field*/
double    vxb_l_gg       ;         /* EMF generated by gg  tether (Volts)    */
double    vxb_l          ;         /* EMF generated by lib tether (Volts)    */

double    vxb_dl_integ   ;         /* EMF generated by integrating VxB over L*/

double    emf_boom_s_x   ;         /* EMF measured by X-boom at start        */
double    emf_boom_s_y   ;         /* EMF measured by Y-boom at start        */
double    emf_boom_e_x   ;         /* EMF measured by X-boom at end          */
double    emf_boom_e_y   ;         /* EMF measured by Y-boom at end          */

double    theta_bl       ;         /* Angle in degrees between tether and B  */

double    theta_vb       ;         /* Angle between the velocity vector and  */
                                   /*  the magnetic field vector             */
double    phi_el         ;         /* Angle between the electric field vect  */
                                   /*  and the tether                        */
double    d_b_l_start    ;         /* Distance between the tether start and  */
                                   /*  the computed magnetic field vector    */
double    d_b_l_end      ;         /* Distance between the tether end and    */
                                   /*  the computed magnetic field vector    */

Cartesian boom_thrust_x  ;         /* Thrust generated by iLxB in 2 X booms  */
Cartesian boom_thrust_y  ;         /* Thrust generated by iLxB in 2 Y booms  */
Cartesian boom_thrust_z  ;         /* Thrust generated by iLxB in 2 Z booms  */

Cartesian total_boom_thrust ;      /* Thrust generated by 2X + 2Y + 2Z booms */

double boom_thrust_run_avg_x ; 
double boom_thrust_run_avg_y ; 
double boom_thrust_run_avg_z ; 

double boom_thrust_x_mag ;
double boom_thrust_y_mag ;
double boom_thrust_z_mag ;

double boom_thrust_x_isp ;
double boom_thrust_y_isp ;
double boom_thrust_z_isp ;

double boom_thrust_x_dv ;
double boom_thrust_y_dv ;
double boom_thrust_z_dv ;

double boom_thrust_x_dv_pkg ;
double boom_thrust_y_dv_pkg ;
double boom_thrust_z_dv_pkg ;

double boom_thrust_x_t2p ;
double boom_thrust_y_t2p ;
double boom_thrust_z_t2p ;

Cartesian boom_torque_x  ;        /* Torque generated by LxiLxB in 2 X booms  */
Cartesian boom_torque_y  ;        /* Torque generated by LxiLxB in 2 Y booms  */
Cartesian boom_torque_z  ;        /* Torque generated by LxiLxB in 2 Z booms  */

double boom_torque_x_mag  ;
double boom_torque_y_mag  ;
double boom_torque_z_mag  ;

double boom_torque_x_t2p  ;
double boom_torque_y_t2p  ;
double boom_torque_z_t2p  ;

double fuel_used = 0.0 ;
double    det_span_set   ;         /* Determinant of vector set 0 => no span */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

struct PARAMETERS emf_param_list [] =
{
   {"EX_BOOM_LENGTH", P_REAL, &efield_boom_x,
    "Length of boom used to measure Ex (along X in LVLH)   (m)   "},
   {"EY_BOOM_LENGTH", P_REAL, &efield_boom_y,
    "Length of boom used to measure Ey (along Y in LVLH)   (m)   "},
   {"EZ_BOOM_LENGTH", P_REAL, &efield_boom_z,
    "Length of boom used to measure Ez (along Z in LVLH)   (m)   "},
   {"BOOM_CURRENT"  , P_REAL, &boom_current,
    "Current forced through booms (Amperes)                      "},
   {"FUEL_MASS_FLOW", P_REAL, &fuel_mass_flow,
    "Plasma Contactor Total Fuel Mass Flow (kg/sec)              "},
   {"TOTAL_FUEL_MASS", P_REAL, &total_fuel_mass,
    "Total Mission Available Fuel Mass (kg)                      "},
   {"BOOM_POWER_IN"  , P_REAL, &boom_power_in,
    "Input Power to Boom Propulsion (W)                          "},
   {"EMF_INTEG_SEG" , P_INT , &emf_integ_seg,
    "Number of segments for EMF integration (default is 0)       "},
   {"EMF_SET"       , P_REAL , &emf_set,
    "Value to be expicitly used for EMF (no calcs!) (Volts)      "}
} ;

struct OUTPUT_VARS emf_outvar_list [] =
{
   {"VXB_X_LVLH"     , 5, " %13.8f"    , " VxB0_x_(V/m)" , &(vxb_lvlh0.X), 1.0,
    "X component of generated VxB motional E-field (Volts/meter)",
    "Motional E-field ||VxB|-0|=|||-X|= (V/m)", P_REAL, NULL},
   {"VXB_Y_LVLH"     , 5, " %13.8f"    , " VxB0_y_(V/m)" , &(vxb_lvlh0.Y), 1.0,
    "Y component of generated VxB motional E-field (Volts/meter)",
    "Motional E-field ||VxB|-0|=|||-Y|= (V/m)", P_REAL, NULL},
   {"VXB_Z_LVLH"     , 5, " %13.8f"    , " VxB0_z_(V/m)" , &(vxb_lvlh0.Z), 1.0,
    "Z component of generated VxB motional E-field (Volts/meter)",
    "Motional E-field ||VxB|-0|=|||-Z|= (V/m)", P_REAL, NULL},
   {"VXB_LVLH"       , 3, " %13.8f"    , " |VxB0|_(V/m)" , &(vxb_lvlh0_mag),1.0,
    "Magnitude of generated VxB motional E-field (Volts/meter)",
    "Motional E-field ||VxB|-0|=|| (V/m)", P_REAL, NULL},
   {"EMF_INDUCED"    , 3, " %13.4f"   , "  VxB0.L__(V)" , &(vxb_l), 1.0,
    "Induced VxB.L potential (Volts) using B-field at tether 0",
    "Induced EMF VxB|-0|=|xB7L (V)", P_REAL, NULL},
   {"EMF_GG_INDUCED" , 6, " %13.4f"   , "  VxB0.Lgg(V)" , &(vxb_l_gg), 1.0,
    "Induced VxB.Lgg potential (Volts) using B-field at tether 0",
    "Induced EMF VxB|-0|=|xB7L|-gg|= (V)", P_REAL, NULL},
   {"EMF_INTEG"      , 6, " %13.4f"   , "  S_VxB.dL(V)" , &(vxb_dl_integ), 1.0,
    "Integrated VxB.dL potential (Volts)",
    "Integrated EMF VxB|-0|=|xB7dL (V)", P_REAL, NULL},
   {"EMF_BX_START"   , 8, " %13.4f"   , "  EMF_S_X_(V)" , &(emf_boom_s_x), 1.0,
    "Induced VxB.L potential on X aligned boom at tether start",
    "Induced X-boom EMF @ start", P_REAL, NULL},
   {"EMF_BY_START"   , 8, " %13.4f"   , "  EMF_S_Y_(V)" , &(emf_boom_s_y), 1.0,
    "Induced VxB.L potential on Y aligned boom at tether start",
    "Induced Y-boom EMF @ start", P_REAL, NULL},
   {"EMF_BX_END"     , 8, " %13.4f"   , "  EMF_E_X_(V)" , &(emf_boom_e_x), 1.0,
    "Induced VxB.L potential on X aligned boom at tether end",
    "Induced X-boom EMF @ end", P_REAL, NULL},
   {"EMF_BY_END"     , 8, " %13.4f"   , "  EMF_E_Y_(V)" , &(emf_boom_e_y), 1.0,
    "Induced VxB.L potential on Y aligned boom at tether end",
    "Induced Y-boom EMF @ end", P_REAL, NULL},
   {"ANGLE_B_L"      , 9, " %13.6f"   , " Deg_bet_B0&L" , &(theta_bl),R_D_CONST,
    "Angle between tether and local magnetic field vector B0 (deg)",
    "Angle Between L & B|-0|= (deg)", P_REAL, NULL},
   {"ANGLE_V_B"      , 9, " %13.6f"   , " Deg_bet_V&B0" , &(theta_vb),R_D_CONST,
    "Angle between velocity & local magnetic field vector B0 (deg)",
    "Angle Between V & B|-0|= (deg)", P_REAL, NULL},
   {"ANGLE_E_L"      , 9, " %13.6f"   , " Deg_bet_E0&L" , &(phi_el), R_D_CONST,
    "Angle between tether & local electric field vector (deg)",
    "Angle Between L & VxB|-0|= (deg)", P_REAL, NULL},

   {"BOOM_X_THRUST"  , 8, " %14.6f"    , "  |Boom_X|_(N)", &(boom_thrust_x_mag), 1.0, 
    "Magnitude of Thrust generated by current in X boom (N)",
    "|Boom_X| (N)", P_REAL, NULL},
   {"BOOM_Y_THRUST"  , 8, " %14.6f"    , "  |Boom_Y|_(N)", &(boom_thrust_y_mag), 1.0, 
    "Magnitude of Thrust generated by current in Y boom (N)",
    "|Boom_Y| (N)", P_REAL, NULL},
   {"BOOM_Z_THRUST"  , 8, " %14.6f"    , "  |Boom_Z|_(N)", &(boom_thrust_z_mag), 1.0, 
    "Magnitude of Thrust generated by current in Z boom (N)",
    "|Boom_Z| (N)", P_REAL, NULL},

   {"BOOM_X_T_AVG"  ,12, " %18.6f"    , "  |Boom_X_avg|_(N)", &(boom_thrust_run_avg_x), 1.0, 
    "Running average of Magnitude of Thrust generated by current in X boom (N)",
    "|Boom_X|-avg|=| (N)", P_REAL, NULL},
   {"BOOM_Y_T_AVG"  ,12, " %18.6f"    , "  |Boom_Y_avg|_(N)", &(boom_thrust_run_avg_y), 1.0, 
    "Running average of Magnitude of Thrust generated by current in Y boom (N)",
    "|Boom_Y|-avg|=| (N)", P_REAL, NULL},
   {"BOOM_Z_T_AVg"  ,12, " %18.6f"    , "  |Boom_Z_avg|_(N)", &(boom_thrust_run_avg_z), 1.0, 
    "Running average of Magnitude of Thrust generated by current in Z boom (N)",
    "|Boom_Z|-avg|=| (N)", P_REAL, NULL},

   {"TOTAL_X_THRUST"  , 8, "  %17.6f"    , " Boom_Thrust_X_(N)", &(total_boom_thrust.X), 1.0, 
    "Total Thrust Generated in X (LVLH) (N)",
    "Total Thrust LVLH|-X|= (N)", P_REAL, NULL},
   {"TOTAL_Y_THRUST"  , 8, "  %17.6f"    , " Boom_Thrust_Y_(N)", &(total_boom_thrust.Y), 1.0, 
    "Total Thrust Generated in Y (LVLH) (N)",
    "Total Thrust LVLH|-Y|= (N)", P_REAL, NULL},
   {"TOTAL_Z_THRUST"  , 8, "  %17.6f"    , " Boom_Thrust_Z_(N)", &(total_boom_thrust.Z), 1.0, 
    "Total Thrust Generated in Z (LVLH) (N)",
    "Total Thrust LVLH|-Z|= (N)", P_REAL, NULL},

   {"BOOM_X_ISP"  , 10, "  %16.1f"    , " Boom_X_Isp_(sec)", &(boom_thrust_x_isp), 1.0, 
    "Specific Impulse of Thrust generated by current in X boom (sec)",
    "Boom_X I|-sp|= (sec)", P_REAL, NULL},
   {"BOOM_Y_ISP"  , 10, "  %16.1f"    , " Boom_Y_Isp_(sec)", &(boom_thrust_y_isp), 1.0, 
    "Specific Impulse of Thrust generated by current in Y boom (sec)",
    "Boom_Y I|-sp|= (sec)", P_REAL, NULL},
   {"BOOM_Z_ISP"  , 10, "  %16.1f"    , " Boom_Z_Isp_(sec)", &(boom_thrust_z_isp), 1.0, 
    "Specific Impulse of Thrust generated by current in Z boom (sec)",
    "Boom_Z I|-sp|= (sec)", P_REAL, NULL},
   {"BOOM_X_DV"  , 9, "  %17.6f"    , " Boom_X_dV_(m/sec)", &(boom_thrust_x_dv), 1.0, 
    "Velocity change Delta-V generated by current in X boom (m/sec)",
    "Boom_X delta-V (m/sec)", P_REAL, NULL},
   {"BOOM_Y_DV"  , 9, "  %17.6f"    , " Boom_Y_dV_(m/sec)", &(boom_thrust_y_dv), 1.0, 
    "Velocity change Delta-V generated by current in Y boom (m/sec)",
    "Boom_Y delta-V (m/sec)", P_REAL, NULL},
   {"BOOM_Z_DV"  , 9, "  %17.6f"    , " Boom_Z_dV_(m/sec)", &(boom_thrust_z_dv), 1.0, 
    "Velocity change Delta-V generated by current in Z boom (m/sec)",
    "Boom_Z delta-V (m/sec)", P_REAL, NULL},
   {"BOOM_X_DV_PKG", 12, "  %20.6f"    , " Boom_X_dV_(m/sec-kg)", &(boom_thrust_x_dv_pkg), 1.0, 
    "Velocity change Delta-V generated X boom per kg of spacecraft mass (m/sec-kg)",
    "Boom_X delta-V per kilo(m/sec-kg)", P_REAL, NULL},
   {"BOOM_Y_DV_PKG", 12, "  %20.6f"    , " Boom_Y_dV_(m/sec-kg)", &(boom_thrust_y_dv_pkg), 1.0, 
    "Velocity change Delta-V generated Y boom per kg of spacecraft mass (m/sec-kg)",
    "Boom_Y delta-V per kilo(m/sec-kg)", P_REAL, NULL},
   {"BOOM_Z_DV_PKG", 12, "  %20.6f"    , " Boom_Z_dV_(m/sec-kg)", &(boom_thrust_z_dv_pkg), 1.0, 
    "Velocity change Delta-V generated Z boom per kg of spacecraft mass (m/sec-kg)",
    "Boom_Z delta-V per kilo(m/sec-kg)", P_REAL, NULL},
   {"BOOM_X_T2P", 10, "  %17.6f"    , " Boom_X_T2P_(uN/W)", &(boom_thrust_x_t2p), 1.0e6, 
    "Thrust to Power ration of propulsion generated by current in X boom (uN/W)",
    "Boom_X Thrust/Power (uN/W)", P_REAL, NULL},
   {"BOOM_Y_T2P", 10, "  %17.6f"    , " Boom_Y_T2P_(uN/W)", &(boom_thrust_y_t2p), 1.0e6, 
    "Thrust to Power ration of propulsion generated by current in Y boom (uN/W)",
    "Boom_Y Thrust/Power (uN/W)", P_REAL, NULL},
   {"BOOM_Z_T2P", 10, "  %17.6f"    , " Boom_Z_T2P_(uN/W)", &(boom_thrust_z_t2p), 1.0e6, 
    "Thrust to Power ration of propulsion generated by current in Z boom (uN/W)",
    "Boom_Z Thrust/Power (uN/W)", P_REAL, NULL},
   {"BOOM_X_TORQUE", 10, "  %19.6f"    , " Boom_X_Torque_(N-m)", &(boom_torque_x_mag), 1.0,
    "Magnitude of Torque generated by current in X boom (N-m)",
    "Boom_X Torque (N-m)", P_REAL, NULL},
   {"BOOM_Y_TORQUE", 10, "  %19.6f"    , " Boom_Y_Torque_(N-m)", &(boom_torque_y_mag), 1.0,
    "Magnitude of Torque generated by current in Y boom (N-m)",
    "Boom_Y Torque (N-m)", P_REAL, NULL},
   {"BOOM_Z_TORQUE", 10, "  %19.6f"    , " Boom_Z_Torque_(N-m)", &(boom_torque_z_mag), 1.0,
    "Magnitude of Torque generated by current in Z boom (N-m)",
    "Boom_Z Torque (N-m)", P_REAL, NULL},
   {"BOOM_X_TORQ2P", 12, "  %21.6f"    , " Boom_X_Torq2P_(N-m/W)", &(boom_torque_x_t2p), 1.0,
    "Torque to Power ratio of torque generated by current in X boom (N-m/W)",
    "Boom_X Torque/Power (N-m/W)", P_REAL, NULL},
   {"BOOM_Y_TORQ2P", 12, "  %21.6f"    , " Boom_Y_Torq2P_(N-m/W)", &(boom_torque_y_t2p), 1.0,
    "Torque to Power ratio of torque generated by current in Y boom (N-m/W)",
    "Boom_Y Torque/Power (N-m/W)", P_REAL, NULL},
   {"BOOM_Z_TORQ2P", 12, "  %21.6f"    , " Boom_Z_Torq2P_(N-m/W)", &(boom_torque_z_t2p), 1.0,
    "Torque to Power ratio of torque generated by current in Z boom (N-m/W)",
    "Boom_Z Torque/Power (N-m/W)", P_REAL, NULL},

   {"FUEL_USED",  9, "  %14.6f"    , " Fuel_Used_(kg)", &(fuel_used), 1.0,
    "Total aggregate amount fuel used in mission (kg)",
    "Total Fuel Used (kg)", P_REAL, NULL},

   {"BOOM_SPAN_DET"  ,11, " %13.9f"   , "i   Boom_Span", &(det_span_set), 1.0,
    "Determinant of boom thrust vectors set to check for spanning set",
    "Det (boom thrust vect)", P_REAL, NULL}
} ;

#else

extern double efield_boom_x     ;
extern double efield_boom_y     ;
extern double efield_boom_z     ;

extern double boom_current      ;

extern double fuel_mass_flow    ;
extern double total_fuel_mass   ;
extern double boom_power_in     ;

extern int    emf_integ_seg     ;
extern double emf_set           ;

extern Cartesian vxb_lvlh0      ;
extern double    vxb_lvlh0_mag  ;
extern double    vxb_l_gg       ;
extern double    vxb_l          ;

extern double    vxb_dl_integ   ;
extern double    vxb_l_start    ;
extern double    vxb_l_end      ;

extern double    emf_boom_s_x   ;
extern double    emf_boom_s_y   ;
extern double    emf_boom_e_x   ;
extern double    emf_boom_e_y   ;

extern double    theta_bl       ;
extern double    theta_vb       ;
extern double    phi_el         ;

extern double    d_b_l_start    ;
extern double    d_b_l_end      ;

extern Cartesian boom_thrust_x  ;
extern Cartesian boom_thrust_y  ;
extern Cartesian boom_thrust_z  ;

extern Cartesian total_boom_thrust ;

extern double boom_thrust_run_avg_x ; 
extern double boom_thrust_run_avg_y ; 
extern double boom_thrust_run_avg_z ; 

extern double boom_thrust_x_mag ;
extern double boom_thrust_y_mag ;
extern double boom_thrust_z_mag ;

extern double boom_thrust_x_mag ;
extern double boom_thrust_y_mag ;
extern double boom_thrust_z_mag ;

extern double boom_thrust_x_isp ;
extern double boom_thrust_y_isp ;
extern double boom_thrust_z_isp ;

extern double boom_thrust_x_dv ;
extern double boom_thrust_y_dv ;
extern double boom_thrust_z_dv ;

extern double boom_thrust_x_dv_pkg ;
extern double boom_thrust_y_dv_pkg ;
extern double boom_thrust_z_dv_pkg ;

extern double boom_thrust_x_t2p ;
extern double boom_thrust_y_t2p ;
extern double boom_thrust_z_t2p ;

extern Cartesian boom_torque_x  ;
extern Cartesian boom_torque_y  ;
extern Cartesian boom_torque_z  ;

extern double boom_torque_x_mag  ;
extern double boom_torque_y_mag  ;
extern double boom_torque_z_mag  ;

extern double boom_torque_x_t2p  ;
extern double boom_torque_y_t2p  ;
extern double boom_torque_z_t2p  ;

extern double fuel_used ;

extern double    det_span_set   ;

extern Cartesian e_field_start  ;
extern double    e_field_m_s    ;

extern Cartesian e_field_end    ;
extern double    e_field_m_e    ;

extern Cartesian e_field_0      ;
extern double    e_field_m_0    ;

extern PARAM     emf_param_list  [] ;
extern OUTVAR    emf_outvar_list [] ;

#endif

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifdef _NO_PROTO_

double compute_vxb_l_lvlh   () ;

double compute_integ_vxb_dl () ;

double compute_angle        () ;

void   init_emfs            () ;

void   compute_emfs         () ;

#else

double compute_vxb_l_lvlh (Cartesian sat_r_eci  , Cartesian sat_v_eci,
                           Cartesian bfield_lgeo, Cartesian tether_lvlh,
                           int compute_angle_dist) ;

double compute_integ_vxb_dl (Cartesian sat_r_eci , Cartesian sat_v_eci,
                             Cartesian tether_lvlh) ;

double compute_angle (Cartesian *v1, Cartesian *v2) ;

void   init_emfs    () ;

void   compute_emfs () ;

#endif

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

                                   /* Data type to indicate whether or not   */
                                   /*   to compute ang & dist between B & L  */
enum {NO_COMPUTE_DA_B_L, COMPUTE_DA_B_L} ;
